---
layout: default
navsection: userguide
navmenu: Tutorials
title: "Storing and Retrieving data using Arvados Keep"

...

h1. Storing and Retrieving data using Arvados Keep

This tutorial introduces you to the Arvados file storage system.


*This tutorial assumes that you are "logged into an Arvados VM instance":{{site.baseurl}}/user/getting_started/ssh-access.html#login, and have a "working environment.":{{site.baseurl}}/user/getting_started/check-environment.html*

The Arvados distributed file system is called *Keep*.  Keep is a content-addressable file system.  This means that files are managed using special unique identifiers derived from the _contents_ of the file, rather than human-assigned file names (specifically, the md5 hash).  This has a number of advantages:
* Files can be stored and replicated across a cluster of servers without requiring a central name server.
* Systematic validation of data integrity by both server and client because the checksum is built into the identifier.
* Minimizes data duplication (two files with the same contents will result in the same identifier, and will not be stored twice.)
* Avoids data race conditions (an identifier always points to the same data.)

h1. Putting Data into Keep

We will start with downloading a freely available VCF file from the "Personal Genome Project (PGP)":http://www.personalgenomes.org subject "hu599905":https://my.personalgenomes.org/profile/hu599905 to a staging directory on the VM, and then add it to Keep.

In the following tutorials, replace <b><code>you</code></b> with your user id.

First, log into the Arvados VM instance and set up the staging area:

notextile. <pre><code>~$ <span class="userinput">mkdir /scratch/<b>you</b></span></code></pre>

Next, download the file:

<notextile>
<pre><code>~$ <span class="userinput">cd /scratch/<b>you</b></span>
/scratch/<b>you</b>$ <span class="userinput">curl -o var-GS000016015-ASM.tsv.bz2 'https://warehouse.personalgenomes.org/warehouse/f815ec01d5d2f11cb12874ab2ed50daa+234+K@ant/var-GS000016015-ASM.tsv.bz2'</span>
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  216M  100  216M    0     0  10.0M      0  0:00:21  0:00:21 --:--:-- 9361k
</code></pre>
</notextile>

{% include 'notebox_begin' %}

If you have your own data, for example @MyData.vcf@, you can use @scp@ or @rsync@ to copy from your local workstation to the shell VM (run this on your local workstation):

notextile. <pre><code>~$ <span class="userinput">scp MyData.vcf <b>you@shell</b>.arvados:/scratch/<b>you</b>/MyData.vcf</span></code></pre>

{% include 'notebox_end' %}

Now use @arv keep put@ to add your VCF data to Keep, then delete the local copy of the file:

<notextile>
<pre><code>/scratch/<b>you</b>$ <span class="userinput">arv keep put var-GS000016015-ASM.tsv.bz2</span>
c1bad4b39ca5a924e481008009d94e32+210
/scratch/<b>you</b>$ <span class="userinput">rm var-GS000016015-ASM.tsv.bz2</span>
</code></pre>
</notextile>

The output value @c1bad4b39ca5a924e481008009d94e32+210@ from @arv keep put@ is the Keep locator.  This enables you to access the file you just uploaded, and is explained in the next section.

h2. Putting a directory

You can also use @arv keep put@ to add an entire directory:

<notextile>
<pre><code>/scratch/<b>you</b>$ <span class="userinput">mkdir tmp</span>
/scratch/<b>you</b>$ <span class="userinput">echo "hello alice" > tmp/alice.txt</span>
/scratch/<b>you</b>$ <span class="userinput">echo "hello bob" > tmp/bob.txt</span>
/scratch/<b>you</b>$ <span class="userinput">echo "hello carol" > tmp/carol.txt</span>
/scratch/<b>you</b>$ <span class="userinput">arv keep put tmp</span>
0M / 0M 100.0% 
887cd41e9c613463eab2f0d885c6dd96+83
</code></pre>
</notextile>

h1. Getting Data from Keep

In Keep, information is stored in *data blocks*.  Data blocks are normally between 1 byte and 64 megabytes in size.  If a file exceeds the maximum size of a single data block, the file will be split across multiple data blocks until the entire file can be stored.  These data blocks may be stored and replicated across multiple disks, servers, or clusters.  Each data block has its own identifier for the contents of that specific data block.

In order to reassemble the file, Keep stores a *collection* data block which lists in sequence the data blocks that make up the original file.  A collection data block may store the information for multiple files, including a directory structure.

In this example we will use @c1bad4b39ca5a924e481008009d94e32+210@ which we added to keep in the previous section.  First let us examine the contents of this collection using @arv keep get@:

<notextile>
<pre><code>/scratch/<b>you</b>$ <span class="userinput">arv keep get c1bad4b39ca5a924e481008009d94e32+210</span>
. 204e43b8a1185621ca55a94839582e6f+67108864 b9677abbac956bd3e86b1deb28dfac03+67108864 fc15aff2a762b13f521baf042140acec+67108864 323d2a3ce20370c4ca1d3462a344f8fd+25885655 0:227212247:var-GS000016015-ASM.tsv.bz2
</code></pre>
</notextile>

The command @arv keep get@ fetches the contents of the locator @c1bad4b39ca5a924e481008009d94e32+210@.  This is a locator for a collection data block, so it fetches the contents of the collection.  In this example, this collection consists of a single file @var-GS000016015-ASM.tsv.bz2@ which is 227212247 bytes long, and is stored using four sequential data blocks, <code>204e43b8a1185621ca55a94839582e6f+67108864</code>, <code>b9677abbac956bd3e86b1deb28dfac03+67108864</code>, <code>fc15aff2a762b13f521baf042140acec+67108864</code>, <code>323d2a3ce20370c4ca1d3462a344f8fd+25885655</code>.

Let's use @arv keep get@ to download the first datablock:

notextile. <pre><code>/scratch/<b>you</b>$ <span class="userinput">arv keep get 204e43b8a1185621ca55a94839582e6f+67108864 &gt; block1</span></code></pre>

Let's look at the size and compute the md5 hash of @block1@:

<notextile>
<pre><code>/scratch/<b>you</b>$ <span class="userinput">ls -l block1</span>
-rw-r--r-- 1 you group 67108864 Dec  9 20:14 block1
/scratch/<b>you</b>$ <span class="userinput">md5sum block1</span>
204e43b8a1185621ca55a94839582e6f  block1
</code></pre>
</notextile>

Notice that the block identifer <code>204e43b8a1185621ca55a94839582e6f+67108864</code> of:
* the md5 hash @204e43b8a1185621ca55a94839582e6f@ which matches the md5 hash of @block1@
* a size hint @67108864@ which matches the size of @block1@

Next, let's use @arv keep get@ to download and reassemble @var-GS000016015-ASM.tsv.bz2@ using the following command:

<notextile>
<pre><code>/scratch/<b>you</b>$ <span class="userinput">arv keep get c1bad4b39ca5a924e481008009d94e32+210/var-GS000016015-ASM.tsv.bz2 .</span>
</code></pre>

This downloads the file @var-GS000016015-ASM.tsv.bz2@ described by collection @c1bad4b39ca5a924e481008009d94e32+210@ from Keep and places it into the local directory.  Now that we have the file, we can compute the md5 hash of the complete file:

<notextile>
<pre><code>/scratch/<b>you</b>$ <span class="userinput">md5sum var-GS000016015-ASM.tsv.bz2</span>
44b8ae3fde7a8a88d2f7ebd237625b4f  var-GS000016015-ASM.tsv.bz2
</code></pre>
</notextile>

h2. Accessing Collections

There are a couple of other ways to access a collection.  You may view the contents of a collection using @arv keep ls@:

<notextile>
<pre><code>/scratch/<b>you</b>$ <span class="userinput">arv keep ls c1bad4b39ca5a924e481008009d94e32+210</span>
var-GS000016015-ASM.tsv.bz2
/scratch/<b>you</b>$ <span class="userinput">arv keep ls -s c1bad4b39ca5a924e481008009d94e32+210</span>
221887 var-GS000016015-ASM.tsv.bz2
</code></pre>
</notextile>

* @-s@ prints file sizes in kilobytes

You may also access through the Arvados Workbench using a URI similar to this, where the last part of the path is the Keep locator:

"https://workbench.{{ site.arvados_api_host }}/collections/c1bad4b39ca5a924e481008009d94e32+210":https://workbench.{{ site.arvados_api_host }}/collections/c1bad4b39ca5a924e481008009d94e32+210

You are now ready to proceed to the next tutorial, "running a crunch job.":tutorial-job1.html
